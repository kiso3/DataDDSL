package DataDDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Aggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_And = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Betwean = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Character = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDictionary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DateTime = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Domain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Field = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Integer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Jednako = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Logical = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Ogranicenje = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OgranicenjeIzDomen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OgranicenjeProsto = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefineDomain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Real = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SemanticDomain = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Set = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SlozenoOgranicenje = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Structure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StructureDef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VeceOd = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("815eb6b7-22e1-4726-bdca-f62fbf6e1b22"), "DataDDSL")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Aggregate;
      case 1:
        return props_And;
      case 2:
        return props_Betwean;
      case 3:
        return props_Character;
      case 4:
        return props_Component;
      case 5:
        return props_DataDictionary;
      case 6:
        return props_DateTime;
      case 7:
        return props_Domain;
      case 8:
        return props_Field;
      case 9:
        return props_Integer;
      case 10:
        return props_Jednako;
      case 11:
        return props_Logical;
      case 12:
        return props_NotNull;
      case 13:
        return props_Ogranicenje;
      case 14:
        return props_OgranicenjeIzDomen;
      case 15:
        return props_OgranicenjeProsto;
      case 16:
        return props_PredefineDomain;
      case 17:
        return props_Real;
      case 18:
        return props_SemanticDomain;
      case 19:
        return props_Set;
      case 20:
        return props_SlozenoOgranicenje;
      case 21:
        return props_Structure;
      case 22:
        return props_StructureDef;
      case 23:
        return props_VeceOd;
    }
    throw new IllegalStateException();
  }
}
